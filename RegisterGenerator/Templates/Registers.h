/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
#pragma once
#include "SMBusDevice.h"
#include "Libraries/Treehopper.Libraries.h"
#include "Libraries/RegisterManager.h"
#include "Libraries/Register.h"

using namespace Treehopper::Libraries;

namespace Treehopper { namespace Libraries { {{#NamespaceFragments}}namespace {{.}} { {{/NamespaceFragments}}

    {{#RegisterList}}
    {{#Values.Values}}
    {{#Enum}}
    enum class {{PluralizedName}}
    {
    {{#ValuesList}}
        {{Key}} = {{#Value}}{{Value}}{{^Last}},{{/Last}}{{/Value}}
    {{/ValuesList}}
	};

    {{/Enum}}
    {{/Values.Values}}
    {{/RegisterList}}

    class {{Name}}Registers : public RegisterManager
    {
    public:
        {{#RegisterList}}
        class {{CapitalizedName}}Register : public Register
        {
        public:
			{{CapitalizedName}}Register(RegisterManager& regManager) : Register(regManager,{{Address}}, {{NumBytes}}, {{IsBigEndian}}) { }
        {{#Values.Values}}
            int {{Name}};
        {{/Values.Values}}
		{{#Values.Values}}
    {{#Enum}}
            {{PluralizedName}} get{{CapitalizedName}}() { return ({{PluralizedName}}){{Name}}; }
            void set{{CapitalizedName}}({{PluralizedName}} enumVal) { {{Name}} = (int)enumVal; }
    {{/Enum}}
    {{/Values.Values}}

            long getValue() { return {{#Values.Values}}(({{Name}} & {{Bitmask}}) << {{Offset}}){{^Last}} | {{/Last}}{{/Values.Values}}; }
            void setValue(long val)
            {
                {{#Values.Values}}
                {{#IsSigned}}
                {{Name}} = (int)(((val >> {{Offset}}) & {{Bitmask}}) << (32 - {{Width}})) >> (32 - {{Width}});
                {{/IsSigned}}
                {{^IsSigned}}
                {{Name}} = (int)((val >> {{Offset}}) & {{Bitmask}});
                {{/IsSigned}}
                {{/Values.Values}}
            }
        };

        {{/RegisterList}}
        {{#RegisterList}}
            {{CapitalizedName}}Register {{Name}};
        {{/RegisterList}}

		{{Name}}Registers(SMBusDevice& device) : RegisterManager(device, {{MultiRegisterAccess}}){{#RegisterList}}, {{Name}}(*this){{/RegisterList}}
		{ 
			{{#RegisterList}}
			registers.push_back(&{{Name}});
			{{/RegisterList}}
		}
    };
{{#NamespaceFragments}} } {{/NamespaceFragments}} } }