/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
#pragma once
#include "SMBusDevice.h"
#include "Libraries/Treehopper.Libraries.h"
#include "Libraries/RegisterManager.h"
#include "Libraries/Register.h"

using namespace Treehopper::Libraries;

namespace Treehopper { namespace Libraries { namespace Sensors { namespace Optical { 

    enum class Powers
    {
        powerDown = 0,
        powerUp = 3
	};

    enum class IntegrationTimings
    {
        Time_13_7ms = 0,
        Time_101ms = 1,
        Time_402ms = 2,
        Time_Manual = 3
	};

    enum class IntrControlSelects
    {
        InterruptOutputDisabled = 0,
        LevelInterrupt = 1,
        SMBAlertCompliant = 2,
        TestMode = 3
	};


    class Tsl2561Registers : public RegisterManager
    {
    public:
        class ControlRegister : public Register
        {
        public:
			ControlRegister(RegisterManager& regManager) : Register(regManager,0x80, 1, false) { }
            int power;
            Powers getPower() { return (Powers)power; }
            void setPower(Powers enumVal) { power = (int)enumVal; }

            long getValue() { return ((power & 0x3) << 0); }
            void setValue(long val)
            {
                power = (int)((val >> 0) & 0x3);
            }
        };

        class TimingRegister : public Register
        {
        public:
			TimingRegister(RegisterManager& regManager) : Register(regManager,0x81, 1, false) { }
            int integrationTiming;
            int manual;
            int gain;
            IntegrationTimings getIntegrationTiming() { return (IntegrationTimings)integrationTiming; }
            void setIntegrationTiming(IntegrationTimings enumVal) { integrationTiming = (int)enumVal; }

            long getValue() { return ((integrationTiming & 0x3) << 0) | ((manual & 0x1) << 3) | ((gain & 0x1) << 4); }
            void setValue(long val)
            {
                integrationTiming = (int)((val >> 0) & 0x3);
                manual = (int)((val >> 3) & 0x1);
                gain = (int)((val >> 4) & 0x1);
            }
        };

        class InterruptThresholdLowRegister : public Register
        {
        public:
			InterruptThresholdLowRegister(RegisterManager& regManager) : Register(regManager,0x82, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class InterruptThresholdHighRegister : public Register
        {
        public:
			InterruptThresholdHighRegister(RegisterManager& regManager) : Register(regManager,0x84, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class InterruptControlRegister : public Register
        {
        public:
			InterruptControlRegister(RegisterManager& regManager) : Register(regManager,0x86, 1, false) { }
            int persist;
            int intrControlSelect;
            IntrControlSelects getIntrControlSelect() { return (IntrControlSelects)intrControlSelect; }
            void setIntrControlSelect(IntrControlSelects enumVal) { intrControlSelect = (int)enumVal; }

            long getValue() { return ((persist & 0xF) << 0) | ((intrControlSelect & 0x3) << 4); }
            void setValue(long val)
            {
                persist = (int)((val >> 0) & 0xF);
                intrControlSelect = (int)((val >> 4) & 0x3);
            }
        };

        class IdRegister : public Register
        {
        public:
			IdRegister(RegisterManager& regManager) : Register(regManager,0x8A, 1, false) { }
            int revNumber;
            int partNumber;

            long getValue() { return ((revNumber & 0xF) << 0) | ((partNumber & 0xF) << 4); }
            void setValue(long val)
            {
                revNumber = (int)((val >> 0) & 0xF);
                partNumber = (int)((val >> 4) & 0xF);
            }
        };

        class Data0Register : public Register
        {
        public:
			Data0Register(RegisterManager& regManager) : Register(regManager,0x8C, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class Data1Register : public Register
        {
        public:
			Data1Register(RegisterManager& regManager) : Register(regManager,0x8E, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

            ControlRegister control;
            TimingRegister timing;
            InterruptThresholdLowRegister interruptThresholdLow;
            InterruptThresholdHighRegister interruptThresholdHigh;
            InterruptControlRegister interruptControl;
            IdRegister id;
            Data0Register data0;
            Data1Register data1;

		Tsl2561Registers(SMBusDevice& device) : RegisterManager(device, true), control(*this), timing(*this), interruptThresholdLow(*this), interruptThresholdHigh(*this), interruptControl(*this), id(*this), data0(*this), data1(*this)
		{ 
			registers.push_back(&control);
			registers.push_back(&timing);
			registers.push_back(&interruptThresholdLow);
			registers.push_back(&interruptThresholdHigh);
			registers.push_back(&interruptControl);
			registers.push_back(&id);
			registers.push_back(&data0);
			registers.push_back(&data1);
		}
    };
 }  }  } }